/**
 * HLS - IAM (Identity Access Management)
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-01-17T19:46:35Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://uy53ix52v2.execute-api.us-east-1.amazonaws.com/pre_alpha".replace(/\/+$/, "");
export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface AccessToken {
    /**
     * The token.
     */
    "accessToken"?: string;
    /**
     * Last name of the Uber user.
     */
    "created"?: string;
    /**
     * DateTime when created.
     */
    "createdBy"?: string;
    /**
     * Description for the access token.
     */
    "description"?: string;
    /**
     * Policy for the created access token.
     */
    "policy"?: any;
}

export interface ArrayOfAccessToken extends Array<AccessToken> {
}

export interface ArrayOfUser extends Array<User> {
}

export interface ModelError {
    "code"?: number;
    "message"?: string;
    "fields"?: string;
}

export interface ModifiableUserCredentials {
    /**
     * Email for user.
     */
    "email"?: string;
    /**
     * DateTime when created.
     */
    "created"?: Date;
    /**
     * Description for the access token.
     */
    "description"?: string;
    /**
     * Policy for the user.
     */
    "policy"?: { [key: string]: Policy; };
}

export interface Policy {
    "rules"?: Array<Rule>;
}

export interface Rule {
    "action"?: string;
    "resources"?: Array<string>;
}

export interface User {
    /**
     * Unique identifier for user.
     */
    "userId"?: string;
    /**
     * Email for user.
     */
    "email"?: string;
    /**
     * DateTime when created.
     */
    "created"?: Date;
    /**
     * Description for the access token.
     */
    "description"?: string;
    /**
     * Policy for the user.
     */
    "policy"?: { [key: string]: Policy; };
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /** 
     * @param accessToken 
     */
    accessTokenDelete(params: {  "accessToken": string; }, options?: any): FetchArgs {
        // verify required parameter "accessToken" is set
        if (params["accessToken"] == null) {
            throw new Error("Missing required parameter accessToken when calling accessTokenDelete");
        }
        const baseUrl = `/AccessToken`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "accessToken": params["accessToken"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param accessToken 
     */
    accessTokenGet(params: {  "accessToken": string; }, options?: any): FetchArgs {
        // verify required parameter "accessToken" is set
        if (params["accessToken"] == null) {
            throw new Error("Missing required parameter accessToken when calling accessTokenGet");
        }
        const baseUrl = `/AccessToken`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "accessToken": params["accessToken"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    accessTokenOptions(options?: any): FetchArgs {
        const baseUrl = `/AccessToken`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param policy 
     */
    accessTokenPost(params: {  "policy": Policy; }, options?: any): FetchArgs {
        // verify required parameter "policy" is set
        if (params["policy"] == null) {
            throw new Error("Missing required parameter policy when calling accessTokenPost");
        }
        const baseUrl = `/AccessToken`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["policy"]) {
            fetchOptions.body = JSON.stringify(params["policy"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    accessTokensGet(options?: any): FetchArgs {
        const baseUrl = `/AccessTokens`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    accessTokensOptions(options?: any): FetchArgs {
        const baseUrl = `/AccessTokens`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    userDelete(options?: any): FetchArgs {
        const baseUrl = `/User`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param userId 
     */
    userGet(params: {  "userId"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/User`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params["userId"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    userOptions(options?: any): FetchArgs {
        const baseUrl = `/User`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param accessToken 
     * @param resource 
     */
    userPolicyGet(params: {  "accessToken": string; "resource"?: string; }, options?: any): FetchArgs {
        // verify required parameter "accessToken" is set
        if (params["accessToken"] == null) {
            throw new Error("Missing required parameter accessToken when calling userPolicyGet");
        }
        const baseUrl = `/UserPolicy`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "accessToken": params["accessToken"],
            "resource": params["resource"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param userId 
     * @param policy 
     */
    userPolicyPut(params: {  "userId": string; "policy": Policy; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userPolicyPut");
        }
        // verify required parameter "policy" is set
        if (params["policy"] == null) {
            throw new Error("Missing required parameter policy when calling userPolicyPut");
        }
        const baseUrl = `/UserPolicy`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params["userId"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["policy"]) {
            fetchOptions.body = JSON.stringify(params["policy"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param modifiableUserCredentials 
     */
    userPost(params: {  "modifiableUserCredentials": ModifiableUserCredentials; }, options?: any): FetchArgs {
        // verify required parameter "modifiableUserCredentials" is set
        if (params["modifiableUserCredentials"] == null) {
            throw new Error("Missing required parameter modifiableUserCredentials when calling userPost");
        }
        const baseUrl = `/User`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["modifiableUserCredentials"]) {
            fetchOptions.body = JSON.stringify(params["modifiableUserCredentials"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param userId 
     * @param modifiableUserCredentials 
     */
    userPut(params: {  "userId": string; "modifiableUserCredentials": ModifiableUserCredentials; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userPut");
        }
        // verify required parameter "modifiableUserCredentials" is set
        if (params["modifiableUserCredentials"] == null) {
            throw new Error("Missing required parameter modifiableUserCredentials when calling userPut");
        }
        const baseUrl = `/User`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params["userId"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["modifiableUserCredentials"]) {
            fetchOptions.body = JSON.stringify(params["modifiableUserCredentials"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param skip 
     * @param limit 
     */
    usersGet(params: {  "skip"?: string; "limit"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/Users`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "limit": params["limit"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    usersOptions(options?: any): FetchArgs {
        const baseUrl = `/Users`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /** 
     * @param accessToken 
     */
    accessTokenDelete(params: { "accessToken": string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.accessTokenDelete(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param accessToken 
     */
    accessTokenGet(params: { "accessToken": string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<AccessToken> {
        const fetchArgs = DefaultApiFetchParamCreator.accessTokenGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    accessTokenOptions(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.accessTokenOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param policy 
     */
    accessTokenPost(params: { "policy": Policy;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<AccessToken> {
        const fetchArgs = DefaultApiFetchParamCreator.accessTokenPost(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    accessTokensGet(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<ArrayOfAccessToken> {
        const fetchArgs = DefaultApiFetchParamCreator.accessTokensGet(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    accessTokensOptions(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.accessTokensOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    userDelete(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userDelete(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param userId 
     */
    userGet(params: { "userId"?: string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = DefaultApiFetchParamCreator.userGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    userOptions(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param accessToken 
     * @param resource 
     */
    userPolicyGet(params: { "accessToken": string; "resource"?: string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Policy> {
        const fetchArgs = DefaultApiFetchParamCreator.userPolicyGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param userId 
     * @param policy 
     */
    userPolicyPut(params: { "userId": string; "policy": Policy;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Policy> {
        const fetchArgs = DefaultApiFetchParamCreator.userPolicyPut(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param modifiableUserCredentials 
     */
    userPost(params: { "modifiableUserCredentials": ModifiableUserCredentials;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = DefaultApiFetchParamCreator.userPost(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param userId 
     * @param modifiableUserCredentials 
     */
    userPut(params: { "userId": string; "modifiableUserCredentials": ModifiableUserCredentials;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = DefaultApiFetchParamCreator.userPut(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param skip 
     * @param limit 
     */
    usersGet(params: { "skip"?: string; "limit"?: string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<ArrayOfUser> {
        const fetchArgs = DefaultApiFetchParamCreator.usersGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    usersOptions(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.usersOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /** 
     * @param accessToken 
     */
    accessTokenDelete(params: {  "accessToken": string; }, options?: any) {
        return DefaultApiFp.accessTokenDelete(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param accessToken 
     */
    accessTokenGet(params: {  "accessToken": string; }, options?: any) {
        return DefaultApiFp.accessTokenGet(params, options)(this.fetch, this.basePath);
    }
    /** 
     */
    accessTokenOptions(options?: any) {
        return DefaultApiFp.accessTokenOptions(options)(this.fetch, this.basePath);
    }
    /** 
     * @param policy 
     */
    accessTokenPost(params: {  "policy": Policy; }, options?: any) {
        return DefaultApiFp.accessTokenPost(params, options)(this.fetch, this.basePath);
    }
    /** 
     */
    accessTokensGet(options?: any) {
        return DefaultApiFp.accessTokensGet(options)(this.fetch, this.basePath);
    }
    /** 
     */
    accessTokensOptions(options?: any) {
        return DefaultApiFp.accessTokensOptions(options)(this.fetch, this.basePath);
    }
    /** 
     */
    userDelete(options?: any) {
        return DefaultApiFp.userDelete(options)(this.fetch, this.basePath);
    }
    /** 
     * @param userId 
     */
    userGet(params: {  "userId"?: string; }, options?: any) {
        return DefaultApiFp.userGet(params, options)(this.fetch, this.basePath);
    }
    /** 
     */
    userOptions(options?: any) {
        return DefaultApiFp.userOptions(options)(this.fetch, this.basePath);
    }
    /** 
     * @param accessToken 
     * @param resource 
     */
    userPolicyGet(params: {  "accessToken": string; "resource"?: string; }, options?: any) {
        return DefaultApiFp.userPolicyGet(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param userId 
     * @param policy 
     */
    userPolicyPut(params: {  "userId": string; "policy": Policy; }, options?: any) {
        return DefaultApiFp.userPolicyPut(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param modifiableUserCredentials 
     */
    userPost(params: {  "modifiableUserCredentials": ModifiableUserCredentials; }, options?: any) {
        return DefaultApiFp.userPost(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param userId 
     * @param modifiableUserCredentials 
     */
    userPut(params: {  "userId": string; "modifiableUserCredentials": ModifiableUserCredentials; }, options?: any) {
        return DefaultApiFp.userPut(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param skip 
     * @param limit 
     */
    usersGet(params: {  "skip"?: string; "limit"?: string; }, options?: any) {
        return DefaultApiFp.usersGet(params, options)(this.fetch, this.basePath);
    }
    /** 
     */
    usersOptions(options?: any) {
        return DefaultApiFp.usersOptions(options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * @param accessToken 
         */
        accessTokenDelete(params: {  "accessToken": string; }, options?: any) {
            return DefaultApiFp.accessTokenDelete(params, options)(fetch, basePath);
        },
        /** 
         * @param accessToken 
         */
        accessTokenGet(params: {  "accessToken": string; }, options?: any) {
            return DefaultApiFp.accessTokenGet(params, options)(fetch, basePath);
        },
        /** 
         */
        accessTokenOptions(options?: any) {
            return DefaultApiFp.accessTokenOptions(options)(fetch, basePath);
        },
        /** 
         * @param policy 
         */
        accessTokenPost(params: {  "policy": Policy; }, options?: any) {
            return DefaultApiFp.accessTokenPost(params, options)(fetch, basePath);
        },
        /** 
         */
        accessTokensGet(options?: any) {
            return DefaultApiFp.accessTokensGet(options)(fetch, basePath);
        },
        /** 
         */
        accessTokensOptions(options?: any) {
            return DefaultApiFp.accessTokensOptions(options)(fetch, basePath);
        },
        /** 
         */
        userDelete(options?: any) {
            return DefaultApiFp.userDelete(options)(fetch, basePath);
        },
        /** 
         * @param userId 
         */
        userGet(params: {  "userId"?: string; }, options?: any) {
            return DefaultApiFp.userGet(params, options)(fetch, basePath);
        },
        /** 
         */
        userOptions(options?: any) {
            return DefaultApiFp.userOptions(options)(fetch, basePath);
        },
        /** 
         * @param accessToken 
         * @param resource 
         */
        userPolicyGet(params: {  "accessToken": string; "resource"?: string; }, options?: any) {
            return DefaultApiFp.userPolicyGet(params, options)(fetch, basePath);
        },
        /** 
         * @param userId 
         * @param policy 
         */
        userPolicyPut(params: {  "userId": string; "policy": Policy; }, options?: any) {
            return DefaultApiFp.userPolicyPut(params, options)(fetch, basePath);
        },
        /** 
         * @param modifiableUserCredentials 
         */
        userPost(params: {  "modifiableUserCredentials": ModifiableUserCredentials; }, options?: any) {
            return DefaultApiFp.userPost(params, options)(fetch, basePath);
        },
        /** 
         * @param userId 
         * @param modifiableUserCredentials 
         */
        userPut(params: {  "userId": string; "modifiableUserCredentials": ModifiableUserCredentials; }, options?: any) {
            return DefaultApiFp.userPut(params, options)(fetch, basePath);
        },
        /** 
         * @param skip 
         * @param limit 
         */
        usersGet(params: {  "skip"?: string; "limit"?: string; }, options?: any) {
            return DefaultApiFp.usersGet(params, options)(fetch, basePath);
        },
        /** 
         */
        usersOptions(options?: any) {
            return DefaultApiFp.usersOptions(options)(fetch, basePath);
        },
    };
};

