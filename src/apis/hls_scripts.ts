/**
 * HLS - Scripts
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-09-06T18:36:25Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://lorwldp7ic.execute-api.us-east-1.amazonaws.com/pre_alpha".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface Empty {
}

export interface FileResponse {
    /**
     * URL for file with authentication.
     */
    "url": string;
}

export interface Script {
    "name": string;
    "description": string;
    "tags": any;
    "files"?: Array<string>;
    "version": number;
    "runtime": string;
    "defaultEnvironment"?: { [key: string]: ScriptEnvironment; };
    "environments"?: any;
}

export interface ScriptEnvironment {
    /**
     * Labeled data channels that relate to the environment.
     */
    "channels"?: any;
    /**
     * Flexible key values that will be included to the environment.
     */
    "env"?: any;
}

export interface Scripts extends Array<Script> {
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     * 
     * @param script 
     * @param file 
     */
    fileGet(params: {  "script"?: string; "file"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/File`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "script": params["script"],
            "file": params["file"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    fileOptions(options?: any): FetchArgs {
        const baseUrl = `/File`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param name 
     */
    scriptGet(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/Script`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    scriptOptions(options?: any): FetchArgs {
        const baseUrl = `/Script`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param prefix 
     * @param tags 
     */
    scriptsGet(params: {  "prefix"?: string; "tags"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/Scripts`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "prefix": params["prefix"],
            "tags": params["tags"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    scriptsOptions(options?: any): FetchArgs {
        const baseUrl = `/Scripts`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     * 
     * @param script 
     * @param file 
     */
    fileGet(params: { "script"?: string; "file"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileResponse> {
        const fetchArgs = DefaultApiFetchParamCreator.fileGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    fileOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.fileOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param name 
     */
    scriptGet(params: { "name"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Script> {
        const fetchArgs = DefaultApiFetchParamCreator.scriptGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    scriptOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.scriptOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param prefix 
     * @param tags 
     */
    scriptsGet(params: { "prefix"?: string; "tags"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Scripts> {
        const fetchArgs = DefaultApiFetchParamCreator.scriptsGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    scriptsOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.scriptsOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param script 
     * @param file 
     */
    fileGet(params: {  "script"?: string; "file"?: string; }, options?: any) {
        return DefaultApiFp.fileGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    fileOptions(options?: any) {
        return DefaultApiFp.fileOptions(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param name 
     */
    scriptGet(params: {  "name"?: string; }, options?: any) {
        return DefaultApiFp.scriptGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    scriptOptions(options?: any) {
        return DefaultApiFp.scriptOptions(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param prefix 
     * @param tags 
     */
    scriptsGet(params: {  "prefix"?: string; "tags"?: string; }, options?: any) {
        return DefaultApiFp.scriptsGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    scriptsOptions(options?: any) {
        return DefaultApiFp.scriptsOptions(options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param script 
         * @param file 
         */
        fileGet(params: {  "script"?: string; "file"?: string; }, options?: any) {
            return DefaultApiFp.fileGet(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        fileOptions(options?: any) {
            return DefaultApiFp.fileOptions(options)(fetch, basePath);
        },
        /**
         * 
         * @param name 
         */
        scriptGet(params: {  "name"?: string; }, options?: any) {
            return DefaultApiFp.scriptGet(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        scriptOptions(options?: any) {
            return DefaultApiFp.scriptOptions(options)(fetch, basePath);
        },
        /**
         * 
         * @param prefix 
         * @param tags 
         */
        scriptsGet(params: {  "prefix"?: string; "tags"?: string; }, options?: any) {
            return DefaultApiFp.scriptsGet(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        scriptsOptions(options?: any) {
            return DefaultApiFp.scriptsOptions(options)(fetch, basePath);
        },
    };
};

