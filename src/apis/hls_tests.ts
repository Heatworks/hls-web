/**
 * HLS - Tests
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-01-26T19:45:18Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://d3kndyx4n9.execute-api.us-east-1.amazonaws.com/pre_alpha".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface Empty {
}

export interface Test {
    "name": string;
    "description": string;
    /**
     * Data channels that relate to the test.
     */
    "channels": Array<string>;
    "range"?: Array<number>;
    "tags"?: any;
    "markers"?: Array<TestMarkers>;
}

export interface TestMarkers {
    "name"?: string;
    "description"?: string;
    "timestamp"?: number;
    "tags"?: any;
}

export interface Tests extends Array<Test> {
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /** 
     * @param name 
     */
    testDelete(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/Test`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param name 
     */
    testGet(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/Test`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    testOptions(options?: any): FetchArgs {
        const baseUrl = `/Test`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param test 
     */
    testPut(params: {  "test": Test; }, options?: any): FetchArgs {
        // verify required parameter "test" is set
        if (params["test"] == null) {
            throw new Error("Missing required parameter test when calling testPut");
        }
        const baseUrl = `/Test`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["test"]) {
            fetchOptions.body = JSON.stringify(params["test"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, options.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param prefix 
     * @param tags 
     */
    testsGet(params: {  "prefix"?: string; "tags"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/Tests`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "prefix": params["prefix"],
            "tags": params["tags"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    testsOptions(options?: any): FetchArgs {
        const baseUrl = `/Tests`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /** 
     * @param name 
     */
    testDelete(params: { "name"?: string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.testDelete(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param name 
     */
    testGet(params: { "name"?: string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Test> {
        const fetchArgs = DefaultApiFetchParamCreator.testGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    testOptions(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.testOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param test 
     */
    testPut(params: { "test": Test;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.testPut(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param prefix 
     * @param tags 
     */
    testsGet(params: { "prefix"?: string; "tags"?: string;  }, options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Tests> {
        const fetchArgs = DefaultApiFetchParamCreator.testsGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    testsOptions(options?: any): (fetch: FetchAPI, basePath?: string) => Promise<Empty> {
        const fetchArgs = DefaultApiFetchParamCreator.testsOptions(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /** 
     * @param name 
     */
    testDelete(params: {  "name"?: string; }, options?: any) {
        return DefaultApiFp.testDelete(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param name 
     */
    testGet(params: {  "name"?: string; }, options?: any) {
        return DefaultApiFp.testGet(params, options)(this.fetch, this.basePath);
    }
    /** 
     */
    testOptions(options?: any) {
        return DefaultApiFp.testOptions(options)(this.fetch, this.basePath);
    }
    /** 
     * @param test 
     */
    testPut(params: {  "test": Test; }, options?: any) {
        return DefaultApiFp.testPut(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param prefix 
     * @param tags 
     */
    testsGet(params: {  "prefix"?: string; "tags"?: string; }, options?: any) {
        return DefaultApiFp.testsGet(params, options)(this.fetch, this.basePath);
    }
    /** 
     */
    testsOptions(options?: any) {
        return DefaultApiFp.testsOptions(options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * @param name 
         */
        testDelete(params: {  "name"?: string; }, options?: any) {
            return DefaultApiFp.testDelete(params, options)(fetch, basePath);
        },
        /** 
         * @param name 
         */
        testGet(params: {  "name"?: string; }, options?: any) {
            return DefaultApiFp.testGet(params, options)(fetch, basePath);
        },
        /** 
         */
        testOptions(options?: any) {
            return DefaultApiFp.testOptions(options)(fetch, basePath);
        },
        /** 
         * @param test 
         */
        testPut(params: {  "test": Test; }, options?: any) {
            return DefaultApiFp.testPut(params, options)(fetch, basePath);
        },
        /** 
         * @param prefix 
         * @param tags 
         */
        testsGet(params: {  "prefix"?: string; "tags"?: string; }, options?: any) {
            return DefaultApiFp.testsGet(params, options)(fetch, basePath);
        },
        /** 
         */
        testsOptions(options?: any) {
            return DefaultApiFp.testsOptions(options)(fetch, basePath);
        },
    };
};

